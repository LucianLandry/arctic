NCURSES UI WASHED-OUT COLORS
(especially, dark gray background instead of black)
You are likely using gnome-terminal.  This terminal supports a configurable
color "pallete" that is used for ncurses programs.  Unfortunately the default
(custom) pallete as shipped with Debian effectively seems to give the behavior
"don't give programs a true black when they request COLOR_BLACK".  Which isn't
a bug because, hey, it's part of the pallete :P
can_change_color() also returns false for gnome-terminal, and
use_default_colors() (as expected) has only deleterious effects, so the issue
cannot be worked around from arctic's side.  To "fix" gnome-terminal, do
"Edit -> Profile Preferences -> Colors", and change "Built-in schemes" to "Linux
console" or (slightly brighter, but reduces contrast) "Rxvt".  Alternative: just
change the first color in the "Color pallete" to the darkest color you can
find.  To avoid clobbering the original custom profile, you might want to
create a new one.
Or, of course, you could use a terminal with sane color defaults.

-------------------------------------------------------------------------------

USING GIT:

history of everything: git log
history of a file: git log <file>
diff modified files against index (does not include untracked files, there is
    no one-liner way to do that): git diff
diff files in index against last commit: git diff --cached
add all (unignored) untracked files to index + remove deleted files from index:
    git add --all --verbose
commit everything, including tracked files not in the index yet, but not
    including untracked files: git commit --all
revert uncommitted (including indexed) changes: git reset --hard
"unkeep": git reset --mixed
list all untracked files: git ls-files --others --exclude-standard

revert a single file:
git checkout HEAD (file)

-------------------------------------------------------------------------------

USING CMAKE:

cd <builddir>
# generates Makefiles.
cmake -D JUCE_PATH=/home/blandry/juce -D JUCE_DEBUG=1 ../src

# Under Debian Jessie, 'arctic' currently runs faster when built by clang.
# Note that the `which ...` below seems to be required for cmake 3.0.2;
#  otherwise multiple invocations of cmake in the same build directory will
#  cause the make step to fail weirdly.
# Also note that gcc 4.9.2 is subtly broken in the warnings department; we run
#  into https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61971 (or similar).  The
#  issue is fixed in gcc 4.9.3.
cmake -D JUCE_PATH=/home/blandry/juce -D JUCE_DEBUG=1 -D CMAKE_C_COMPILER=`which gcc` -D CMAKE_CXX_COMPILER=`which g++` ../src
cmake -D JUCE_PATH=/home/blandry/juce -D JUCE_DEBUG=1 -D CMAKE_C_COMPILER=`which clang` -D CMAKE_CXX_COMPILER=`which clang++` ../src
make

No true build log is normally generated, but if you need one, you can do:
make VERBOSE=1

Documentation is at http://www.cmake.org.

-------------------------------------------------------------------------------

PROFILING:
Two options.
1) Perf events.  This is preferred; you don't need particularly special compile
    flags and it runs faster.  With 'perf report' you can drill down into
    a function and match the offending assembly back to the original line of
    source code, including inlined functions. (although I am not sure how
    accurate that is.)
   Specifying -fno-omit-frame-pointer might help to make finding callers more
    accurate, and it's not that horrible of a performance penalty.
   Example: perf record -g ./arctic -p=1 -h=0; perf report

2) gprof.  Go into CMakeLists.txt, set the profiling options, build+run, then
    run gprof on the output.  (the command takes awhile)
   Example: gprof ./arctic gmon.out

Not tried: valgrind/callgrind/etc.

-------------------------------------------------------------------------------

BUILDING JUCE:
Current download instructions for Juce's latest git version are:
mkdir ~/juce-git.20160919
cd ~/juce-git.20160919
git clone --depth 1 git://github.com/julianstorer/JUCE.git
cd ~
ln -s juce-git.20160919/JUCE juce

Juce needs (at least) these Debian packages:
g++                  # g++
libasound2-dev       # alsa/asoundlib.h
libgl1-mesa-dev      # libGL.so
libxcursor-dev       # Xcursor.h
libxinerama-dev      # Xinerama.h
libxrandr-dev        # Xrandr.h
mesa-common-dev      # GL/gl.h
libcurl4-openssl-dev # curl/curl.h # maybe could use nss-dev or gnutls-dev

-------------------------------------------------------------------------------
JUCE GOTCHAS:

-- Hitting a "JUCE Assertion failure" when building with the debug library
   under Linux will result in the process becoming a zombie at exit.  This is
   because the mechanism juce_isRunningUnderDebugger() uses to find its result
   is a hack (calling ptrace(PT_DETACH...) from a child thread), and apparently
   does not work on any thread except the main one.  To be fair I don't think
   there's a good way to do it, or I would have submitted a patch.
   In the meantime, we should avoid sloppy code that hits these failures.

-------------------------------------------------------------------------------

USING ARCTIC FROM CONSOLE:

gnome-terminal has funky color handling and the background shows up as dark
    gray instead of black (as described above, the pallete needs to be
    changed).  Also, flashing is disabled.  The linux console has a dark
    background, but the flashing is messed up.  konsole and xterm work, though.

-------------------------------------------------------------------------------

NIFTY XBOARD COMMANDS:
# human play against arctic (black)
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -smpCores 8 -fcp ./arctic

# play arctic (white) against default computer opponent (black)
# (note: cannot use '-depth' argument, gnuchessx now gets confused and thinks
# depth\n5\n is a move.
xboard -size bulky -debug -thinking -mode TwoMachines -xponder -smpCores 8 -fcp ./arctic

# play arctic against itself
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -smpCores 8 -fcp ./arctic -scp ./arctic

# look at a game.
xboard -size bulky -ncp

# arguments for a short game:
-tc 1 -inc 1 # one minute starttime, 1 second increment

# play arctic against older version
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -smpCores 8 -scp ./arctic -fcp ../../arcticExe/arctic10

# play arctic against older version (white)
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -smpCores 8 -fcp ./arctic -scp ../../arcticExe/arctic10

# play human on FICS
xboard -size bulky -ics -icshost freechess.org # no timeseal
xboard -size bulky -ics -icshost 167.114.65.195 -icshelper timeseal.Linux

# play computer on FICS
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -ponder -thinking -zp -ics -icshost 167.114.65.195 -icshelper timeseal.Linux -smpCores 8 -fcp ./arctic -zippyGameStart 'say Hi, I am a homebrew computer program.  My author is mandolin.  Please have fun!'
set highlight 0
set examine 0
set autoflag 1

# Play a UCI engine - vs UCI engine match (pondering enabled to understand
# UCI innards better)
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -ponder -mode TwoMachines -smpCores 8 -fcp "polyglot -noini -log true -lf /home/blandry/polyglot.log -ec fruit" -scp "polyglot -noini -log true -lf /home/blandry/polyglot.log2 -ec stockfish"

# Play arctic (UCI) against older version
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -smpCores 8 -fcp ../../arcticExe/arctic10 -scp "polyglot -noini -log true -lf /home/blandry/polyglot.log3 -ec ./arctic"

# uci: figure out whether pondering returns a pondermove when stopped
uci
isready
ucinewgame
# position startpos moves e2e4
# check evals with White down its kbpawn:
position fen rnbqkbnr/pppppppp/8/8/8/8/PPPPP2P/RNBQKBNR w KQkq - 0 1 moves a2a4
position fen rnbqkbnr/pppppppp/8/8/8/8/PPPPP2P/RNBQKBNR w KQkq - 0 1 moves e2e4
go infinite ponder
# expect illegal command
go infinite ponder searchmoves d2d3 c2c3
go infinite ponder searchmoves b7b5 c7c6
ponderhit
stop
# stockfish returns the pv move after the bestmove for pondering, even *when* pondering.  As does Fruit.  example: bestmove g8f6 ponder e4e5.
quit
