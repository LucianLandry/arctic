USING GIT:

history of everything: git log
history of a file: git log <file>
diff modified files against index (does not include untracked files, there is
    no one-liner way to do that): git diff
diff files in index against last commit: git diff --cached
add all (unignored) untracked files to index + remove deleted files from index:
    git add --all --verbose
commit everything, including tracked files not in the index yet, but not
    including untracked files: git commit --all
revert uncommitted (including indexed) changes: git reset --hard
"unkeep": git reset --mixed
list all untracked files: git ls-files --others --exclude-standard

revert a single file:
git checkout HEAD (file)

-------------------------------------------------------------------------------

USING CMAKE:

cd <builddir>
# generates Makefiles.
# Juce's actual classes/structures change depending on whether JUCE_DEBUG has
#  been defined.  As a consequence:
# If Juce has been built with "Debugging enabled" checked in the Introjucer,
#  you MUST define JUCE_DEBUG or else you will get either weird 'non-virtual
#  thunk to ...' errors during link, or worse (on older compilers), weird
#  runtime errors.
# If Juce has been built w/out debugging, you MUST NOT define JUCE_DEBUG or else
#  you will ... wait for it ... get weird runtime errors.
cmake -D JUCE_PATH=/home/blandry/libjuce -D JUCE_DEBUG=1 ../src
# Under Debian Jessie, 'arctic' currently runs faster when built by clang.
# Note that the `which ...` below seems to be required for cmake 3.0.2;
#  otherwise multiple invocations of cmake in the same build directory will
#  cause the make step to fail weirdly.
# Also note that gcc 4.9.2 is subtly broken in the warnings department; we run
#  into https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61971 (or similar).  The
#  issue is fixed in gcc 4.9.3.
cmake -D JUCE_PATH=/home/blandry/libjuce -D JUCE_DEBUG=1 -D CMAKE_C_COMPILER=`which gcc` -D CMAKE_CXX_COMPILER=`which g++` ../src
cmake -D JUCE_PATH=/home/blandry/libjuce -D JUCE_DEBUG=1 -D CMAKE_C_COMPILER=`which clang` -D CMAKE_CXX_COMPILER=`which clang++` ../src
make

No true build log is normally generated, but if you need one, you can do:
make VERBOSE=1

Documentation is at http://www.cmake.org.

-------------------------------------------------------------------------------

PROFILING:
Two options.
1) Perf events.  This is preferred; you don't need particularly special compile
    flags and it runs faster.  With 'perf report' you can drill down into
    a function and match the offending assembly back to the original line of
    source code, including inlined functions. (although I am not sure how
    accurate that is.)
   Specifying -fno-omit-frame-pointer might help to make finding callers more
    accurate, and it's not that horrible of a performance penalty.
   Example: perf record -g ./arctic -p=1 -h=0; perf report

2) gprof.  Go into CMakeLists.txt, set the profiling options, build+run, then
    run gprof on the output.  (the command takes awhile)
   Example: gprof ./arctic gmon.out

Not tried: valgrind/callgrind/etc.

-------------------------------------------------------------------------------

BUILDING JUCE:
Download juce 2.0, and unpack it such that it shows up as ${HOME}/juce.
cd ${HOME}/juce/extras/static\ library
../Introjucer/Builds/Linux/build/Introjucer juce.jucer
# tweak as necessary (adding Linux release), then save project, preferably as
# another file like juceb.jucer.  Then
cd Builds/Linux
make clean
make

Current download instructions for Juce's latest git version (not currently used) are:
git clone --depth 1 git://github.com/julianstorer/JUCE.git
mv JUCE juce-git.20150629
ln -s juce-git.20150629 juce
cd juce/extras/Introjucer/Builds/Linux
make # builds Introjucer
mkdir ~/libJuce
build/IntroJucer
File -> "New Project"
Click "Static Library"
Project Name: libjuce
("Create")
"Ok" (to use current juce directory as modules directory)
uncheck "Include BinaryData.h in the AppConfig.h file"
Clicked on "Linux Makefile->Debug" just to make sure it looked sane.
File->Save
cd ~/libjuce/Builds/LinuxMakefile
# this builds the Debug version.  For release, perhaps try "make CONFIG=Release"
make
# output is in ~/libjuce/Builds/LinuxMakefile/build/libjuce.a

Juce needs (at least) these Debian packages:
g++             # g++
libasound2-dev  # alsa/asoundlib.h
libgl1-mesa-dev # libGL.so
libxcursor-dev  # Xcursor.h
libxinerama-dev # Xinerama.h
libxrandr-dev   # Xrandr.h
mesa-common-dev # GL/gl.h

-------------------------------------------------------------------------------
JUCE GOTCHAS:

-- Hitting a "JUCE Assertion failure" when building with the debug library
   under Linux will result in the process becoming a zombie at exit.  This is
   because the mechanism juce_isRunningUnderDebugger() uses to find its result
   is a hack (calling ptrace(PT_DETACH...) from a child thread), and apparently
   does not work on any thread except the main one.  To be fair I don't think
   there's a good way to do it, or I would have submitted a patch.
   In the meantime, we should avoid sloppy code that hits these failures.

-------------------------------------------------------------------------------

USING ARCTIC FROM CONSOLE:

gnome-terminal has funky color handling and the background shows up as dark
    gray instead of black.  The linux console has a dark background, but the
    flashing is messed up.  Only workaround so far is to use konsole or xterm.

-------------------------------------------------------------------------------

NIFTY XBOARD COMMANDS:
# human play against arctic (black)
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -fcp ./arctic

# play arctic (white) against default computer opponent (black)
# (note: cannot use '-depth' argument, gnuchessx now gets confused and thinks
# depth\n5\n is a move.
xboard -size bulky -debug -thinking -mode TwoMachines -xponder -fcp ./arctic

# play arctic against itself
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -fcp ./arctic -scp ./arctic

# look at a game.
xboard -size bulky -ncp

# play arctic against older version
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -scp ./arctic -fcp ../../arcticExe/arctic10

# play arctic against older version (white)
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -fcp ./arctic -scp ../../arcticExe/arctic10

# play human on FICS
xboard -size bulky -ics -icshost freechess.org # no timeseal
xboard -size bulky -ics -icshost 167.114.65.195 -icshelper timeseal.Linux

# play computer on FICS
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -ponder -thinking -zp -ics -icshost 167.114.65.195 -icshelper timeseal.Linux -fcp ./arctic -zippyGameStart 'say Hi, I am a homebrew computer program.  My author is mandolin.  Please have fun!'
set highlight 0
set examine 0
set autoflag 1

# Play a UCI engine - vs UCI engine match (pondering enabled to understand
# UCI innards better)
xboard -size bulky -debug -nameOfDebugFile ~/xboard.debug -thinking -ponder -mode TwoMachines -fcp "polyglot -noini -log true -lf /home/blandry/polyglot.log -ec fruit" -scp "polyglot -noini -log true -lf /home/blandry/polyglot.log2 -ec stockfish"

# Play arctic (UCI) against older version
xboard -size bulky -defaultHashSize 508 -debug -nameOfDebugFile ~/xboard.debug -thinking -xponder -mode TwoMachines -fcp ../../arcticExe/arctic10 -scp "polyglot -noini -log true -lf /home/blandry/polyglot.log3 -ec ./arctic"
